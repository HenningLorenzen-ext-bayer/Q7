[{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2019 Siqi Zhang  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. s1 Copyright (C) 2019 Siqi Zhang This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/examples.html","id":"dogs","dir":"Articles","previous_headings":"","what":"Dogs","title":"More Examples","text":"","code":"Dog <- type(function(name, breed){     say <- function(greeting = \"Woof!\"){         cat(paste0(greeting,                     \" I am \", name, \", a \", breed,                     \".\\n\"))     }     }) walter <- Dog(\"Walter\", \"Husky\") ls(walter) #> [1] \"say\" walter$say() #> Woof! I am Walter, a Husky. max <- walter %>%    clone() %>%    implement({     name <- \"Max\"   }) max$say(\"Wussup Dawg!\") #> Wussup Dawg! I am Walter, a Husky. max %>%    implement({     treats_eaten <- 0     eat_treat <- function(n = 1){       cat(paste(name, \"eats\", n, \"treat(s).\\n\"))       treats_eaten <<- treats_eaten + n     }   }) %>%    implement({     is_satisfied <- function(){       treats_eaten > 5     }   }) max$eat_treat() #> Max eats 1 treat(s). max$is_satisfied() #> [1] FALSE max$eat_treat(2) #> Max eats 2 treat(s). max$is_satisfied() #> [1] FALSE max$eat_treat(3) #> Max eats 3 treat(s). max$is_satisfied() #> [1] TRUE max$treats_eaten #> [1] 6 hasCollar <- feature({   Collar <- type(function(material, color){     description <- function() {       paste(\"is made of\", material, \"and in\", color)     }   })      take_for_a_walk <- function(){     cat(name, \"wears a collar that\", collar$description(), \"\\n\")     cat(\"We're gonna go out for a walk!\")   } }) walter %>%   implement({     hasCollar()     collar <- Collar(\"metal\", \"red\")     rm(Collar)   }) walter$take_for_a_walk() #> Walter wears a collar that is made of metal and in red  #> We're gonna go out for a walk!"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/examples.html","id":"workplace-overtime","dir":"Articles","previous_headings":"","what":"Workplace Overtime","title":"More Examples","text":"","code":"Employee <- type(function(weekly_hours){}, \"Employee\") john <- Employee(45) Manager <- type(function(weekly_hours){   extend(Employee)(weekly_hours)   final[is_manager] <- TRUE }, \"Manager\")  mike <- Manager(45) hasOvertime <- feature_generic(\"hasOvertime\")    hasOvertime.Employee <- feature({   is_overtime <- function() weekly_hours > 40 })  hasOvertime.Manager <- feature({   is_overtime <- function() FALSE }) john %>% hasOvertime() john$is_overtime() #> [1] TRUE mike %>% hasOvertime() mike$is_overtime() #> [1] FALSE hasOvertime.Boss <- feature({   final[is_overtime] <- function(){     FALSE   } })  Boss <-    type({     extend(Employee)(24 * 7)   },    \"Boss\") %>%    hasOvertime() #> Error in (function (x, value, pos = -1, envir = as.environment(pos), inherits = FALSE, : cannot add bindings to a locked environment  jill <- Boss() #> Error in Boss(): could not find function \"Boss\" jill$is_overtime() #> Error in eval(expr, envir, enclos): object 'jill' not found"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/examples.html","id":"grade-school-geometry","dir":"Articles","previous_headings":"","what":"Grade School Geometry","title":"More Examples","text":"","code":"Circle <- type(   function(radius){},    \"Circle\")  Square <- type(   function(side){},    \"Square\")  hasArea <- feature_generic(\"hasArea\")  hasArea.Square <-      feature({         area <- function(){             side ^ 2         }     })  hasArea.Circle <-      feature({         area <- function(){             radius^2 * pi         }     }) circle <- Circle(1) %>% hasArea() circle$area() #> [1] 3.141593  square <- Square(1.5) %>% hasArea() square$area() #> [1] 2.25 hasArea.EquilateralTriangle <- feature({     area <- function(){         (side^2 * sqrt(3)) / 4     } })  EquilateralTriangle <- type(   function(side){},    \"EquilateralTriangle\") %>%     hasArea()  equilateral_triangle <- EquilateralTriangle(1) equilateral_triangle$area() #> [1] 0.4330127"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/examples.html","id":"locked","dir":"Articles","previous_headings":"","what":"Locked","title":"More Examples","text":"","code":"isLocked <- feature({     lockEnvironment(.my, bindings = TRUE) })  TestLocked <- type(function(){     a <- 1 }) %>% isLocked()  test_locked <- TestLocked() #> Error in (function() {: cannot add bindings to a locked environment try(test_locked$a <- 666) #> Error : object 'test_locked' not found try(test_locked$b <- 666) #> Error : object 'test_locked' not found try({   test_locked %>%      implement({       a <- 666     }) }) #> Error in eval(expr, envir, enclos) : object 'test_locked' not found"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/examples.html","id":"state-machine","dir":"Articles","previous_headings":"","what":"State Machine","title":"More Examples","text":"simple state machine guards secret message password.","code":"State <- type(   function(password, secret_message = \"\"){     name <- \"DEFAULT\"     cat(\"Processing Current State...\\n\")     print_current_state <- function(){       cat(paste(\"Current State:\", name, \"\\n\"))     } })  LockedState <- State %>%     implement({         name <- \"Locked\"         print_current_state()         on_event <- function(event) {             if (event == password) {               cat(\"Access Granted.\\n\")               return(UnlockedState(password, secret_message))             } else {               cat(\"Wrong Password. Access Denied.\\n\")               return(.my)             }         }     })  UnlockedState <- State %>%   implement({     name <- \"Unlocked\"     print_current_state()          private[print_secret_message] <- function(){       cat(secret_message)     }          on_event <- function(event) {       if (event == password) {         return(LockedState(password, secret_message))       } else if (event == \"show\") {         print_secret_message()         return(.my)       } else{         cat(\"Invalid Instruction. \\n\")         return(.my)       }     }   })  SimpleDevice <- type(function(password, secret_message){     state <- LockedState(password, secret_message)     on_event <- function(event){         state <<- state$on_event(event)     } }) device <- SimpleDevice(password = \"xxx\",                         secret_message = \"I love you.\") #> Processing Current State... #> Current State: Locked    device$on_event(\"1234\") #> Wrong Password. Access Denied. device$on_event(\"PvmpKinM4n777\") #> Wrong Password. Access Denied.  device$on_event(\"xxx\") #> Access Granted. #> Processing Current State... #> Current State: Unlocked  device$on_event(\"fiddlin...\") #> Invalid Instruction. device$on_event(\"meddlin...\") #> Invalid Instruction. device$on_event(\"show\") #> I love you.  device$on_event(\"xxx\") #> Processing Current State... #> Current State: Locked  device$on_event(\"0000\") #> Wrong Password. Access Denied."},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/examples.html","id":"parameterized-features","dir":"Articles","previous_headings":"State Machine","what":"Parameterized features?","title":"More Examples","text":"feature subordinate dependent type. encouraged put data members type definition, feature mainly contain functions. feel significant need parameterize feature, think ’s better create nested object formally extend type. can always re-define something feature post hoc. implemented future. Microwave","code":"Word <- type(function(word){}) hasRepeat <- feature({   N_TIMES <- 2   repeat_word <- function(){     cat(rep(word, N_TIMES))   } }) apple <- Word(\"apple\") %>% hasRepeat() apple$repeat_word() #> apple apple pear <- Word(\"pear\") %>%    implement({     hasRepeat()     N_TIMES <- 5   }) pear$repeat_word() #> pear pear pear pear pear repeatWordNTimes <- function(word, times){   localize(Word)(word) %>%      hasRepeat() %>%      implement({       N_TIMES <- times     }) }  orange <- repeatWordNTimes(\"orange\", 7) orange$repeat_word() #> orange orange orange orange orange orange orange isIterable <- feature_generic(\"isIterable\")  isIterable.default <- feature({     forEach <- function(fn){         Vector(sapply(elementData, fn))     }      final[is_iterable] <- TRUE })  isLocked <- feature({     lockEnvironment(.my, bindings = TRUE) })  Vector <- type(function(elementData){     elementData <- elementData     elementCount <- length(elementData)      add <- function(e){         unlockBinding(\"elementData\", .my)         unlockBinding(\"elementCount\", .my)             elementData <<- c(elementData, e)             elementCount <<- length(elementData)         lockBinding(\"elementData\", .my)         lockBinding(\"elementCount\", .my)         invisible(.my)     }      remove <- function(index){         unlockBinding(\"elementData\", .my)         unlockBinding(\"elementCount\", .my)             elementData <<- elementData[-index - 1]             elementCount <<- length(elementData)         lockBinding(\"elementData\", .my)         lockBinding(\"elementCount\", .my)         invisible(.my)         }      clear <- function(){         unlockBinding(\"elementData\", .my)         unlockBinding(\"elementCount\", .my)         elementData <<- c()         elementCount <<- length(elementData)         lockBinding(\"elementData\", .my)         lockBinding(\"elementCount\", .my)         invisible(.my)     }      firstElement <- function(){         elementData[1]     }     lastElement <- function(){         elementData[elementCount]     } }, \"Vector\")  %>%     isIterable() %>%     isLocked()  nums <- Vector(c(1,2,3)) #> Error in (function() {: cannot add bindings to a locked environment nums$elementData #> Error in eval(expr, envir, enclos): object 'nums' not found nums$add(4) #> Error in eval(expr, envir, enclos): object 'nums' not found nums$elementData #> Error in eval(expr, envir, enclos): object 'nums' not found nums$elementCount #> Error in eval(expr, envir, enclos): object 'nums' not found  nums$remove(0) #> Error in eval(expr, envir, enclos): object 'nums' not found nums$elementData #> Error in eval(expr, envir, enclos): object 'nums' not found  nums$clear() #> Error in eval(expr, envir, enclos): object 'nums' not found nums$elementData #> Error in eval(expr, envir, enclos): object 'nums' not found nums$elementCount #> Error in eval(expr, envir, enclos): object 'nums' not found  nums$add(c(554, 665, 776)) #> Error in eval(expr, envir, enclos): object 'nums' not found nums$elementData #> Error in eval(expr, envir, enclos): object 'nums' not found  nums$is_iterable <- FALSE #> Error: object 'nums' not found  plus_one <- function(x){     x + 1 }  nums2 <- nums$     forEach(plus_one)$     remove(0)$     add(c(888, 999)) #> Error in eval(expr, envir, enclos): object 'nums' not found  nums2$elementData #> Error in eval(expr, envir, enclos): object 'nums2' not found Microwave <- type(function(){   food <- NULL   put_food <- function(food){     if (!is.null(.my$food)) {       stop(\"There's already food.\")     } else {       .my$food <- food     }   }      check_food <- function(){     if (is.null(food)) {       cat(\"Empty.\\n\")     } else {       cat(paste(\"The food is\", food, \"\\n\"))     }   }      heat <- function(seconds){          cat(paste(food,                \"is heated for\",               paste0(seconds, \"s\\n\")))        }      remove_food <- function(){     food <<- NULL   }    })  microwave <- Microwave() microwave$check_food() #> Empty. microwave$put_food(\"chicken dinner\") microwave$put_food(\"meatballs\") #> Error in microwave$put_food(\"meatballs\"): There's already food. microwave$heat(30) #> chicken dinner is heated for 30s microwave$remove_food() microwave$put_food(\"meatballs\") microwave$check_food() #> The food is meatballs microwave$heat(40) #> meatballs is heated for 40s"},{"path":[]},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/introduction.html","id":"smart-objects","dir":"Articles","previous_headings":"Features","what":"Smart Objects","title":"Introduction to Q7 Type System","text":"Contains reference self: .object belong ? members object?","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/introduction.html","id":"compositional-construction","dir":"Articles","previous_headings":"Features","what":"Compositional Construction","title":"Introduction to Q7 Type System","text":"Freely add, change delete members, ad post hoc, without subclassing Focuses -, rather -relationships Objects can contain references objects","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/introduction.html","id":"no-magic","dir":"Articles","previous_headings":"Features","what":"No Magic","title":"Introduction to Q7 Type System","text":"type function feature function instance, created type feature, environment Perform action within object Normal scoping rules expect","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/introduction.html","id":"terms-and-concepts","dir":"Articles","previous_headings":"","what":"Terms and Concepts","title":"Introduction to Q7 Type System","text":"Q7 employs conventional OOP terms concepts, slight variations: object - unit program data, may refer type instance, type - blueprint object instance - embodiment type member - things bound object; members functions method - function bound (usually) domestic object","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/introduction.html","id":"basic-interface","dir":"Articles","previous_headings":"","what":"Basic Interface","title":"Introduction to Q7 Type System","text":"Defines type. Takes function expression constructor Contains every binding inside closure, except arguments arguments accessible outside object, making private Also contains ., refers instance Defines feature Takes expression Ad hoc: feature can implemented type Post hoc: Can also implemented instance object, type instance expression (including features, importantly, arbitrary expression) Appends expresseion object Make type: Everything defined within function’s closure become members object. function’s arguments accesible bound functions object, become members .","code":"TypeOne <- type(function(arg1, arg2){   var1 <- 3   add <- function(){     arg1 + arg2 + var1   } }) type_one <- TypeOne(1, 2) ls(type_one) #> [1] \"add\"  \"var1\" # There's no `arg1` or `arg2` seen type_one$add() #> [1] 6 # yet `add()` can see both arguments"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/introduction.html","id":"reserved-symbols","dir":"Articles","previous_headings":"","what":"Reserved Symbols","title":"Introduction to Q7 Type System","text":"following symbols reserved Q7 type system shall re-bound user. Environments: .: object’s public environment, user parts program interact .private: object’s private environment, parent .environment Binding Modifiers: private: designates binding private environment public: designates binding public environment (default) final: designates immutable binding public environment private_final: designates immutable binding private environment active: deisgnates active binding public environment active_private: deisgnates active binding private environment Functions: initialize: runs instantiation object finalize: runs object destroyed garbage collector","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/introduction.html","id":"make-variants-of-an-object","dir":"Articles","previous_headings":"","what":"Make Variants of an Object","title":"Introduction to Q7 Type System","text":"two main strategies extending object: inheritance composition. Q7 employs composition, benefit obvious. code inheritance, mind must navigate sub- super- classes inside ; Composition, otherhand, linear addition existing code, simpler mind follow. Types instances can extended manner. concatenative nature Q7 makes different objects truly independent . extend object, use implement(). object type, resulting type must bound name; object instance, modified place (see ). Modifying type impact instances already created type. Code can also packaged feature() later use.","code":"type_one %>% implement({   substract <- function(){     arg1 - arg2   } }) TypeTwo <- type(function(){   n <- 10 }) hasFeatureOne <- feature({   x <- 1   x_plus_n <- function(){     x + n   } }) hasFeatureTwo <- feature({   n <- 100 # Overwrites n from TypeTwo   x <- 10 # Overwrites x from hasFeatureOne   private[x_plus_n.old] <- x_plus_n      # Rename to preserve the old x_plus_n()     # Mark private, because it is only going to be used by the new x_plus_n()   x_plus_n <- function(){     cat(sprintf(\"adding x (%i) to n (%i)...\\n\", x, n)) # do some extra thing     x_plus_n.old() # call the old function   } }) type_two_with_features <- TypeTwo() %>%    hasFeatureOne() %>%    hasFeatureTwo()  type_two_with_features$x_plus_n() #> adding x (10) to n (100)... #> [1] 110"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/introduction.html","id":"private-members","dir":"Articles","previous_headings":"Make Variants of an Object","what":"Private Members","title":"Introduction to Q7 Type System","text":"domestic function object can read write private environment. Remember use double arrow - <<- - want assignment pierce function’s closure reach object . Use caution: symbol ’re assigning <<- exist either public private environments object, end somewhere ouside object, sometimes global environment.","code":"Counter <- type(function(){   private[count] <- 0      add_one <- function(){     count <<- count + 1      # Your IDE's syntax checker may alert you that      # `count` is not found in scope.      # You can safely ignore this.   }      get_count <- function(){     count   } }) counter <- Counter() ls(counter) # `count` can't be seen from the out side #> [1] \"add_one\"   \"get_count\"  counter$get_count() # but count can be read by domestic function #> [1] 0 counter$add_one() # ... and be written to counter$add_one() counter$get_count() # when we read it again the number changes #> [1] 2"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/introduction.html","id":"get-access-to-the-private-environment","dir":"Articles","previous_headings":"Make Variants of an Object > Private Members","what":"Get Access to the Private Environment","title":"Introduction to Q7 Type System","text":"stated , private environment (.private) parent public environment (.). Parameters supplied arguments constructor function implicitly private. two members private public environments name, may co-exist. However, one .win; one .private must explicitly qualified. following code allows direct outside access count object.","code":"exposePrivate <- feature({   .my$pvt_env <- .private$.private  # `.private` contains a reference of itself with the same name, assigns it to `.my`   #pvt_env <- .private # also works })  counter %>% exposePrivate() # .private reference appears in the object ls(counter, all.names = TRUE) #> [1] \"add_one\"   \"get_count\" \"pvt_env\" counter$.private #> NULL counter$pvt_env$count # It is now possible to directly access any variable in the private environment #> [1] 2"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/oop4r.html","id":"introduction-to-oop","dir":"Articles","previous_headings":"","what":"Introduction to OOP","title":"oop4r","text":"Compared dumb objects FP, OOP objects smart; exist, also can act. traditional OOP parlance, objects compounds fields methods, collectivley called members. Fields values methods functions; typically, methods can directly access members object. Dog object may bark, Clock object may tell time.","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/oop4r.html","id":"culprit-of-inheritance","dir":"Articles","previous_headings":"","what":"Culprit of Inheritance","title":"oop4r","text":"OO objects blessed agency, might always blessing programmer. Becuse difficult deal relationship among objects properly delegate responsibilities, uncommon seasoned programmers create web spaghetti many objects working poorly together. example, think something new want object, FP, may simply make another function ’s can handle object. strictly OOP, modify extend class give new method; objects carry around methods might need lifetime, hence adage “need banana; give chimpanzee holding banana, whole forest”. Inheritance cumbersome, objects carry baggage ancestry. Lacking discipline caution, developer eventually build wobbly tower many unnecessary classes. OOP also forces think abstract things tangile, forces classify ; mention tangibles things already really hard classify, imagine: seating apparatus. bean bag chair? Either obviously “container” ’s common meaningfully abstract away Container class? Q7 seeks address issues nature. Good object constructed addition: - pen, apple… - Bam! Apple pen. - pen, pineapple… - Bam! Pineapple pen. Objects used primarily tiny namespace. look “Washington” District Columbia, get nation’s capital city. look “Washington” whole United States, get state Pacific northwest. look “Fairfax” Virginia, county; looked county city; taken Los Angeles, CA, ’s neighborhood. Objects like walls enclose area, things unique names. tiny namespaces. Wherever walls, shalls doors. objects need talk , one needs contain reference another. decide make anything object, think: - Can get just “dumb” objects free functions? methods bound domestic object, can just browse options available . type $, options shown can navigte , instead holding everything head. benefits mainly aesthetic ease use. Composition great way express commonalities different types. Another common narrative classical OOP “information hiding”, make data(fields) private, define “getters setters” read manipulate field. R hiding ? co-workers, boss, client, ? truly private interpreted language like R Python. Sometimes meaningful reduce surface area object hiding away things useful goes intention accessed alone. Reducing clutter alway good. Therefore, Q7 support private members. Use private keyword don’t want binding changed, can use final private_final keywords. aware : type ’re trying define contain functions, data .  Advices: - Search “design patterns” get ideas. - , take seriously. primitive data type, character vector. Let’s make String type re-pack base R functions . defined type named String, produce instances S3 class String, well S3 method print(). $string member vector holds data; members bound functions (methods) object. understand live inside String object. .object special object refers instance . Although can safely excluded cases, precaution place, use .highly recommended avoid scope leak.","code":"String <- type(function(string){   if (length(string) != 1 || !is.character(string)) {      # we only want this object to hold a 1-length character vector     stop(\"string must be a vector of length 1\")   }      string <- string      charAt <- function(index){     unlist(strsplit(.my$string, \"\"))[index + 1]   }      concat <- function(str){     stopifnot(inherits(str,                         \"String\"))          .my$string <- paste0(.my$string,                           str$string)     .my   }      length <- function(){     nchar(.my$string)   }      isEmpty <- function(){     nchar(.my$string) == 0   }      matches <- function(pattern){     string <<- grepl(pattern, string)     .my   }      replaceFirst <- function(regex, replacement){     string <<- sub(regex,                    replacement,                    string)     .my   }      print <- function(){     cat(string)   } }, s3 = \"String\") motto <- String(\"carpe\")$   concat(String(\"-\"))$   concat(String(\"diem\"))  motto$length() #> [1] 10 motto$isEmpty() #> [1] FALSE motto$charAt(5) #> [1] \"-\" motto$replaceFirst(\"\\\\s\", \"-\")$charAt(5) #> [1] \"-\" motto #> carpe-diem"},{"path":[]},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/oop_shiny.html","id":"oop-for-shiny","dir":"Articles","previous_headings":"","what":"OOP for Shiny","title":"OOP for Shiny","text":"R functional programming language. Built R, web framework Shiny also employs paradigm. document shows one many ways employ OO patterns Shiny app Q7 type system. module object following members: id: constructor parameter, aribitrary string represent whole module ns: constructor parameter, Shiny namespace function, defaults depend id, can overidden dev_mode: constructor parameter, simple boolean value tell module turn things ui: ui module fragment server: definition call server module fragment abstractions necessary state: reference object made reactiveValues() new.env(), esposes ’s meaningful modules. Segregation namespace state. use shinydashboard, naturally candidate top-level module. just need define input output panel similarly organized configured, don’t need module.","code":"ShinyModule <- type(function(   id = uuid::UUIDgenerate(FALSE),    ns = NS(id),    dev_mode = FALSE ){   # The following are not strictly necessary, as they will be overidden,   # but serve as good reminders   ui <- function(){tagList(     # ...   )}       server <- function(){callModule(function(input, output, session){     # ...   }, id)}      state <- reactiveValues() })  LoadData <- ShinyModule %>%    implement({     ui <- function(){            }          server             })  PlotChart <- ShinyModule %>%    implement({     ui          server             }) require(shiny) require(Q7)  loadData <- LoadData() plotChart <- PlotChart()  shinyApp(   function(){fluidPage(sidebarLayout(  # UI     loadData$ui(),     plotChart$ui()   ))},   function(input, output, session){ # Server     loadData$server()     plotChart$server()   } )"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/versus_r6.html","id":"terminologies","dir":"Articles","previous_headings":"","what":"Terminologies","title":"Comparison to R6","text":"blueprint object: - R6: class - Q7: type object creates instances blueprint - R6: generator - within, $new() method - Q7: constructor function Functions defined inside object - R6: method - Q7: - bound function (opposed free function) - domestic function (opposed foreign function) following equivalent examples R6’s Introduction, leaving original comments & explainations. can compare implementation R6 Q7 side--side.","code":"library(Q7) #>  #> Attaching package: 'Q7' #> The following object is masked from 'package:base': #>  #>     merge"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/versus_r6.html","id":"basics","dir":"Articles","previous_headings":"","what":"Basics","title":"Comparison to R6","text":"","code":"Person <- type(function(name, hair){   name <- name   hair <- hair   set_hair <- function(val){     hair <<- val   }   greet <- function(){     cat(paste0(\"Hello, my name is \", name, \".\\n\"))   } }, \"Person\") Person #> <Q7type:Person> #> <environment: R_GlobalEnv> ann <- Person(\"Ann\", \"black\") ann #> <Q7instance:Person> #> - greet: <function> #> - hair: <character> #> - name: <character> #> - set_hair: <function> ann$hair #> [1] \"black\" ann$greet() #> Hello, my name is Ann. ann$set_hair(\"red\") ann$hair #> [1] \"red\""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/versus_r6.html","id":"private-members","dir":"Articles","previous_headings":"","what":"Private members","title":"Comparison to R6","text":"","code":"Queue <- type(function(...){   private[queue] <- list()   private[length] <- function(){     base::length(queue)   }      add <- function(x){     queue <<- c(queue, list(x))     invisible(.my)   }      remove <- function() {     if (length() == 0) return(NULL)     head <- queue[[1]]     queue <<- queue[-1]     head   }      private[dots] <- list(...)    # this is necessary because ... (dot-dot-dot) must be captured here, and that    # the initialize() function must not take any arguments.   private[initialize] <- function(){     for (item in dots) {       add(item)     }   } })  q <- Queue(5, 6, \"foo\") q$add(\"something\") q$add(\"another thing\") q$add(17) q$remove() #> [1] 5 q$remove() #> [1] 6 q$queue #> NULL q$length() #> Error in eval(expr, envir, enclos): attempt to apply non-function q$add(10)$add(11)$add(12) q$remove() #> [1] \"foo\" q$remove() #> [1] \"something\" q$remove() #> [1] \"another thing\" q$remove() #> [1] 17"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/versus_r6.html","id":"active-bindings","dir":"Articles","previous_headings":"","what":"Active Bindings","title":"Comparison to R6","text":"NOTE: inheritance Q7, call methods parent class. can rename anything don’t meant override.","code":"Numbers <- type(function(){   x <- 100   active[x2] <- function(value) {       if (missing(value)) return(x * 2)       else x <<- value/2   }   active[rand] <- function(){     rnorm(1)   } }, \"Numbers\")  n <- Numbers() n$x #> [1] 100  n$x2 #> [1] 200  n$x2 <- 1000 n$x #> [1] 500  n$rand #> [1] 1.10535 n$rand #> [1] 1.113476 n$rand <- 3 #> Error in (function () : unused argument (base::quote(3)) HistoryQueue <- Queue %>%    implement({     head_idx <- 0          show <- function() {       cat(\"Next item is at index\", head_idx + 1, \"\\n\")       for (i in seq_along(queue)) {         cat(i, \": \", queue[[i]], \"\\n\", sep = \"\")       }     }          remove <- function() {       if (length() - head_idx == 0) return(NULL)       head_idx <<- head_idx + 1       queue[[head_idx]]     }   })  hq <- HistoryQueue(5, 6, \"foo\") hq$show() #> Next item is at index 1  #> 1: 5 #> 2: 6 #> 3: foo hq$remove() #> [1] 5 hq$show() #> Next item is at index 2  #> 1: 5 #> 2: 6 #> 3: foo hq$remove() #> [1] 6 CountingQueue <- Queue %>% implement({   private[total] <- 0   private[proto.add] <- add       add <- function(x) {       total <<- total + 1       proto.add(x)   }          get_total <-  function() total })  cq <- CountingQueue(\"x\", \"y\") cq$get_total() #> [1] 2 cq$add(\"z\") cq$remove() #> [1] \"x\" cq$remove() #> [1] \"y\" cq$get_total() #> [1] 3"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/versus_r6.html","id":"fields-containing-reference-objects","dir":"Articles","previous_headings":"","what":"Fields containing reference objects","title":"Comparison to R6","text":"Q7 R6 show differnet behavior. Q7’s case, s1’s x isn’t changed s2. x R6 example lives generator; x Q7 lives instance. R6 example goes show solution separate initializer; necessary Q7, type definition initializer(separate initialize() subroutine can defined run object’s initialization).","code":"SimpleClass <- type(function(){   x <- NULL }, \"SimpleClass\")  SharedField <- type(function(){   e <- SimpleClass() }, \"SharedField\")  s1 <- SharedField() s1$e$x <- 1  s2 <- SharedField() s2$e$x <- 2  s1$e$x #> [1] 1"},{"path":[]},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/versus_r6.html","id":"adding-members-to-an-existing-class","dir":"Articles","previous_headings":"Other topics","what":"Adding members to an existing class","title":"Comparison to R6","text":"Q7, new code simply appened old, meaning everything executed linearly beginning end. make inefficient replace something costly make, like reading large amount data performing lengthy calculation. case, ’s best make new type scratch, define common prototype without costly members. Q7 type constructors need () locked.","code":"Simple <- type(function(){   x <- 1   getx <- function(){     x   } }, \"Simple\")  Simple <- Simple %>% implement({   getx2 <- function(){     x * 2   } })  Simple <- Simple %>% implement({   x <- 10 })   s <- Simple() s$getx2() #> [1] 20"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/versus_r6.html","id":"cloning-objects","dir":"Articles","previous_headings":"Other topics","what":"Cloning Objects","title":"Comparison to R6","text":"Deep Cloning default clone() behavior Q7 deep (recursive). nested instances also gets cloned. Like R6, object instances cloned deeply. example custom deep_clone method R6 document skipped brevity.","code":"Simple <- type(function(){   x <- 1   getx <- function(){     x   } }, \"Simple\")  s <- Simple()  s1 <- clone(s)  s1$x <- 2 s1$getx() #> [1] 1  s$getx() #> [1] 1 Simple <- type(function(){   x <- 1 }, \"Simple\")  Cloneable <- type(function(){   s <- NULL   s <- Simple() }, \"Cloneable\")  c1 <- Cloneable() c2 <- clone(c1)  c1$s$x <- 2 c2$s$x #> [1] 1"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/versus_r6.html","id":"printing-q7-objects-to-the-screen","dir":"Articles","previous_headings":"Other topics","what":"Printing Q7 objects to the screen","title":"Comparison to R6","text":"","code":"prettyCountingQueue <- type(function(...){   extend(CountingQueue)(...)   print <- function(){     cat(\"<PrettyCountingQueue> of \", get_total(), \" elements\\n\", sep = \"\")   } }, \"prettyCountingQueue\")  pq <- prettyCountingQueue(1, 2, \"foobar\") pq #> <PrettyCountingQueue> of 3 elements"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/versus_r6.html","id":"finalizers","dir":"Articles","previous_headings":"Other topics","what":"Finalizers","title":"Comparison to R6","text":"finalizer function, must define argument (., name) represent object .","code":"A <- type(function(){   private[finalize] <- function(.my){     base::print(\"Finalizer has been called!\")     # Must always qualify `print()` with package name `base`,      # because it is masked by`print()` in the object masks   } })  obj <- A() rm(obj); gc() #> [1] \"Finalizer has been called!\" #>           used (Mb) gc trigger (Mb) max used (Mb) #> Ncells  720540 38.5    1394571 74.5  1394571 74.5 #> Vcells 1279999  9.8    8388608 64.0  2464859 18.9"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/articles/versus_r6.html","id":"class-methods-vs--member-functions","dir":"Articles","previous_headings":"Other topics","what":"Class methods vs. member functions","title":"Comparison to R6","text":"Q7 context, domestic functions vs foreign functions","code":"FunctionWrapper <- type({   fn <- NULL   get_my <- function(){     .my   } })  a <- FunctionWrapper()  .my <- 100 a$fn <- function(){   .my }  a$get_my() #> Error in eval(expr, envir, enclos): attempt to apply non-function  a$fn() #> [1] 100 b <- clone(a)  b$get_my() #> Error in eval(expr, envir, enclos): attempt to apply non-function b$fn() #> [1] 100"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Siqi Zhang. Author, maintainer. Bayer HealthCare. Funder.","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhang S (2023). Q7: Types Features Object Oriented Programming. R package version 0.1.0.9000,  https://github.com/iqis/Q7, https://henninglorenzen-ext-bayer.github.io/Q7/.","code":"@Manual{,   title = {Q7: Types and Features for Object Oriented Programming},   author = {Siqi Zhang},   year = {2023},   note = {R package version 0.1.0.9000,  https://github.com/iqis/Q7},   url = {https://henninglorenzen-ext-bayer.github.io/Q7/}, }"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/index.html","id":"q7","dir":"","previous_headings":"","what":"Types and Features for Object Oriented Programming","title":"Types and Features for Object Oriented Programming","text":"Q7 type system enables postmodern flavor compositional object-oriented programming (OOP). simple, flexible promotes healthy program design. Q7 features: type(), feature() implement() compose objects; object, initialize() finalize() run beginning end life; object, public, private, final, private_final active binding modifiers change visibility behavior members.","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Types and Features for Object Oriented Programming","text":"","code":"# install.packages(\"devtools\") devtools::install_github(\"iqis/Q7\") require(Q7) #> Loading required package: Q7 #>  #> Attaching package: 'Q7' #> The following object is masked from 'package:base': #>  #>     merge"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/index.html","id":"example","dir":"","previous_headings":"Installation","what":"Example","title":"Types and Features for Object Oriented Programming","text":"Make Q7 object 3 easy steps. 1, Define object type: 2, Instantiate object: 3, Enjoy! See vignettes extending object topics.","code":"Adder <- type(function(num1, num2){     add_nums <- function(){         num1 + num2     }  }) myAdder <- Adder(1, 2) myAdder$add_nums() #> [1] 3"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/clone.Q7instance.html","id":null,"dir":"Reference","previous_headings":"","what":"Clone an Instance — clone.Q7instance","title":"Clone an Instance — clone.Q7instance","text":"Clone Instance","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/clone.Q7instance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clone an Instance — clone.Q7instance","text":"","code":"# S3 method for Q7instance clone(inst, deep = TRUE, ...)"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/clone.Q7instance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clone an Instance — clone.Q7instance","text":"inst Q7 object instance deep copy nested object instances recursively; Boolean ... dot-dot-dot","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/clone.Q7instance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clone an Instance — clone.Q7instance","text":"Q7 object instance","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/clone.Q7instance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clone an Instance — clone.Q7instance","text":"","code":"Type1 <- type(function(num){   print_num <- function(){     base::print(num)   } }) myType1 <- Type1(1) myType1$print_num() #> [1] 1 myType1_clone <- clone(myType1) myType1_clone$print_num() #> [1] 1"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/clone.html","id":null,"dir":"Reference","previous_headings":"","what":"Clone — clone","title":"Clone — clone","text":"Clone","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/clone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clone — clone","text":"","code":"clone(...)"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/clone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clone — clone","text":"... dot-dot-dot","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/expose_private.html","id":null,"dir":"Reference","previous_headings":"","what":"Expose Private Parts of an Instance — expose_private","title":"Expose Private Parts of an Instance — expose_private","text":"Creates reference private environment inside object instance","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/expose_private.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expose Private Parts of an Instance — expose_private","text":"","code":"expose_private(inst)"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/expose_private.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expose Private Parts of an Instance — expose_private","text":"inst instance; <Q7instance>","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/expose_private.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expose Private Parts of an Instance — expose_private","text":"instance; <Q7instance>","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/expose_private.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expose Private Parts of an Instance — expose_private","text":"","code":"TypeOne <- type(function(arg){   private[pvt_val] <- 2 })  instOne <- TypeOne(1) expose_private(instOne) #> <Q7instance:Q7default> #> - .private: <environment>  instOne$.private #> <environment: 0x56395ea796d0> instOne$.private$pvt_val #> [1] 2"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/extend.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend a Type upon a (Proto)type — extend","title":"Extend a Type upon a (Proto)type — extend","text":"Used inside type definition","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/extend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend a Type upon a (Proto)type — extend","text":"","code":"extend(prototype)"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/extend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend a Type upon a (Proto)type — extend","text":"prototype Q7type; function","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/extend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend a Type upon a (Proto)type — extend","text":"localized Q7type; function","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/extend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extend a Type upon a (Proto)type — extend","text":"","code":"Type1 <- type(function(arg1){     val1 <- arg1     get_val1 <- function(){          val1     } }, \"Type1\")  Type2 <- type(function(arg1, arg2){     extend(Type1)(arg1)     val2 <- arg2     get_val2 <- function(){         val2     } }, \"Type2\")  myType2 <- Type2(\"foo\", \"bar\")  myType2$get_val1() #> [1] \"foo\" myType2$get_val2() #> [1] \"bar\""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/feature.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Object Feature — feature","title":"Create an Object Feature — feature","text":"Create Object Feature","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/feature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Object Feature — feature","text":"","code":"feature(expr)"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/feature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Object Feature — feature","text":"expr expression","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/feature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Object Feature — feature","text":"Q7 feature","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/feature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Object Feature — feature","text":"","code":"Type1 <- type(function(num){})  hasMagic <- feature({     change_number <- function(){         num + 1     } })  myType1 <- Type1(1) %>% hasMagic() myType1$change_number() #> [1] 2   # Use S3 method dispatch for different behaviors hasMagic <- feature_generic(s3 = \"hasMagic\")  hasMagic.Type1 <- feature({     change_number <- function(){         num + 1     } })  hasMagic.Type2 <- feature({     change_number <- function(){         num - 1     } })  Type1 <- type(function(num){},               s3 = \"Type1\") %>%     hasMagic()  Type2 <- type(function(num){},               s3 = \"Type2\") %>%     hasMagic()  myType1 <- Type1(1) myType1$change_number() #> [1] 2  myType2 <- Type2(1) myType2$change_number() #> [1] 0"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/feature_generic.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Generic Feature — feature_generic","title":"Create a Generic Feature — feature_generic","text":"Use function need create one methods Q7 types different S3 classes. s3 field feature's name .","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/feature_generic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Generic Feature — feature_generic","text":"","code":"feature_generic(s3, ...)"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/feature_generic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Generic Feature — feature_generic","text":"s3 S3 Class feature ... dot-dot-dot","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/feature_generic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Generic Feature — feature_generic","text":"generic Q7 feature","code":""},{"path":[]},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/implement.html","id":null,"dir":"Reference","previous_headings":"","what":"Implement any Feature for an Object — implement","title":"Implement any Feature for an Object — implement","text":"Implement Feature Object","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/implement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Implement any Feature for an Object — implement","text":"","code":"implement(obj, feat)"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/implement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Implement any Feature for an Object — implement","text":"obj Q7 object (type instance) feat Q7 feature expression","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/implement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Implement any Feature for an Object — implement","text":"Q7 object (type instance)","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/implement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Implement any Feature for an Object — implement","text":"","code":"Type1 <- type(function(num){})  myType1 <- Type1(1) %>% implement({     change_number <- function(){         num + 1     } })  myType1$change_number() #> [1] 2"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/is.html","id":null,"dir":"Reference","previous_headings":"","what":"Is it a Q7 Type, Instance or Feature? — is","title":"Is it a Q7 Type, Instance or Feature? — is","text":"Q7 Type, Instance Feature?","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/is.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is it a Q7 Type, Instance or Feature? — is","text":"","code":"is_type(x)  is_instance(x)  is_feature(x)"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/is.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is it a Q7 Type, Instance or Feature? — is","text":"x object","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/is.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is it a Q7 Type, Instance or Feature? — is","text":"Boolean","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/list2inst.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a Q7 Object Instance from a List — list2inst","title":"Build a Q7 Object Instance from a List — list2inst","text":"Build Q7 Object Instance List","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/list2inst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a Q7 Object Instance from a List — list2inst","text":"","code":"list2inst(x, s3 = \"default\", parent = parent.frame(), ...)"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/list2inst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a Q7 Object Instance from a List — list2inst","text":"x list s3 S3 class name instance parent parent environment instance ... dot-dot-dot","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/list2inst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a Q7 Object Instance from a List — list2inst","text":"Q7 object instance","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/list2inst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a Q7 Object Instance from a List — list2inst","text":"","code":"my_data <- list(a = 1,                 add_to_a = function(value){                   .my$a <- a + value                 })  myDataObject <- list2inst(my_data)  myDataObject$a #> [1] 1 myDataObject$add_to_a(20) myDataObject$a #> [1] 21"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/localize.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a Localized Copy of a Q7 Type or Instance — localize","title":"Make a Localized Copy of a Q7 Type or Instance — localize","text":"Make Localized Copy Q7 Type Instance","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/localize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a Localized Copy of a Q7 Type or Instance — localize","text":"","code":"localize(obj, envir = parent.frame())"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/localize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a Localized Copy of a Q7 Type or Instance — localize","text":"obj Q7 type instance envir environment","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/localize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a Localized Copy of a Q7 Type or Instance — localize","text":"function","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge all Members of Two Instances — merge","title":"Merge all Members of Two Instances — merge","text":"public private members instance 2 copied instance 1, overwriting names.","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge all Members of Two Instances — merge","text":"","code":"merge(inst1, inst2)"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge all Members of Two Instances — merge","text":"inst1 instance move members inst2 instance move members ","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge all Members of Two Instances — merge","text":"Q7 instance, environment identity inst1 members instances.","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge all Members of Two Instances — merge","text":"","code":"Screamer <- type(function(words){   scream <- function(){     paste0(paste(words,                  collapse = \" \"),            \"!!!\")   } })  Whisperer <- type(function(words){   whisper <- function(){     paste0(\"shhhhhhh.....\",            paste(words,                  collapse = \" \"),            \"...\")   } })  p1 <- Screamer(\"I love you\") p1$scream() #> [1] \"I love you!!!\"  p2 <- Whisperer(\"My parents came back\") p2$whisper() #> [1] \"shhhhhhh.....My parents came back...\"  p1 <- p1 %>% merge(p2)  # note the the \"word\" for both methods became that of p2 p1$whisper() #> [1] \"shhhhhhh.....My parents came back...\" p1$scream() #> [1] \"My parents came back!!!\""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/type.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Q7 Type — type","title":"Create a Q7 Type — type","text":"Create Q7 Type","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Q7 Type — type","text":"","code":"type(   fn = function() {  },   s3 = \"Q7default\" )"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Q7 Type — type","text":"fn function; becomes definition object s3 S3 class object; necessary using S3 generic functions","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Q7 Type — type","text":"Q7 type; function","code":""},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/reference/type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Q7 Type — type","text":"","code":"Adder <- type(function(num1, num2){     add_nums <- function(){         num1 + num2     }  })  myAdder <- Adder(1, 2) myAdder$add_nums() #> [1] 3"},{"path":"https://henninglorenzen-ext-bayer.github.io/Q7/news/index.html","id":"q7-010","dir":"Changelog","previous_headings":"","what":"Q7 0.1.0","title":"Q7 0.1.0","text":"CRAN release: 2020-11-25 New release.","code":""}]
